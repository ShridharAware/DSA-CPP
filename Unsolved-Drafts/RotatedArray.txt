class Solution {
public:
    int findElement(vector<int>& nums, int start, int end, int target) {
        int mid = start + (end - start) / 2;
        while (start <= end) {
            if (nums[mid] == target) {
                return mid;
            } else if (target > nums[mid]) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
            mid = start + (end - start) / 2;
        }
        return -1;
    }
    int searchPivote(vector<int>& nums) {
        int start = 0, end = nums.size() - 1, mid = start + (end - start) / 2;
        while (start < end) {
            if (nums[mid] >= nums[0]) {
                start = mid + 1;
            } else {
                end = mid;
            }
            mid = start + (end - start) / 2;
        }
        return start;
    }
    int search(vector<int>& nums, int target) {
        int result = -1;
        int pivot = searchPivote(nums);
        if (target >= nums[0]) {
            int start = 0, end = pivot - 1;
            result = findElement(nums, start, end, target);
        } else {
            int start = pivot, end = nums.size() - 1;
            result = findElement(nums, start, end, target);
        }
        return result;
    }
};